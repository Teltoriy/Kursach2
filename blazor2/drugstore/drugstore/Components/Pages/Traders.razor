@rendermode InteractiveServer
@page "/Traders"
@using Drugstore.Service
@using Drugstore.Data
@inject PharmacyService PharmacyService
@inject NavigationManager navigation

<link href="css/custom.css" rel="stylesheet" />
<Container Class="supplier-container">
    <h1 class="text-center">Карточка поставщика</h1>

    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <label for="supplierSelect">Выберите поставщика:</label>
            <Select TValue="int" @bind-SelectedValue="selectedSupplierId" @onchange="OnSupplierChanged" id="supplierSelect">
                <option value="">Выберите поставщика</option>
                @foreach (var supplier in suppliers)
                {
                    <option value="@supplier.id">@supplier.name</option>
                }
            </Select>
        </Column>
    </Row>

    @if (selectedSupplier != null)
    {
        <div class="supplier-info">
            <h2 class="text-center">@selectedSupplier.name</h2>
            <h3 class="text-center">Товары:</h3>
            <Row>
                @foreach (var product in products)
                {
                    <Column ColumnSize="ColumnSize.Is12" Class="mb-4">
                        <div class="product-card">
                            <h4>@product.name</h4>
                            <p><strong>Фасовки:</strong></p>
                            <ul>
                                @foreach (var packging in product.packingSupplier)
                                {
                                    <li>@packging.packing.packing: @packging.quantity шт.</li>
                                }
                            </ul>
                        </div>
                    </Column>
                }
            </Row>

        </div>
    }
    <div class="text-center mt-5">
        <Button Color="Color.Primary" Clicked="NavigateToHomePage">Вернуться на главную страницу</Button>
    </div>

    
</Container>
<style>
    .product-card {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 5px;
    }
</style>

@code {

    private List<supplier> suppliers = new List<supplier>();
    private List<product> products = new List<product>();
    private supplier selectedSupplier;
    private product selectedProduct;
    private int selectedSupplierId;

    protected override async Task OnInitializedAsync()
    {
        suppliers = await PharmacyService.GetSuppliersAsync();
    }

    private async Task OnSupplierChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int supplierId))
        {
            selectedSupplier = await PharmacyService.GetSupplierByIdAsync(supplierId);
            if (selectedSupplier != null)
            {
                products = await PharmacyService.GetProductsBySupplierIdAsync(supplierId);
            }
        }
    }
    private void NavigateToHomePage()
    {
        navigation.NavigateTo("/");
    }
}
